### Swift dependencies file v0 ###
provides-top-level:
provides-nominal:
provides-member:
- ["6ParserAAC", ""]
- ["6ParserAAC", "parseStatements"]
- ["6ParserAAC", "parseStatement"]
- ["6ParserAAC", "parseThrowStatement"]
- ["6ParserAAC", "parseReturnStatement"]
- ["6ParserAAC", "parseDeferStatement"]
- ["6ParserAAC", "parseContinueStatement"]
- ["6ParserAAC", "parseBreakStatement"]
- ["6ParserAAC", "parseCompilerControlStatement"]
provides-dynamic-lookup:
depends-top-level:
- !private "!"
- !private "!="
- !private "&&"
- !private "..<"
- !private "=="
- !private ">"
- !private "??"
- !private "Array"
- !private "AssignmentOperatorExpression"
- "AssignmentPrecedence"
- !private "AvailabilityCondition"
- !private "Bool"
- !private "BooleanLiteralType"
- "BreakStatement"
- !private "CastingPrecedence"
- "CompilerControlStatement"
- !private "Condition"
- !private "ConditionList"
- "ContinueStatement"
- "DeferStatement"
- !private "DoStatement"
- !private "Expression"
- !private "ExpressionPattern"
- !private "FallthroughStatement"
- !private "FloatLiteralType"
- !private "ForInStatement"
- !private "GuardStatement"
- !private "IfStatement"
- !private "Int"
- !private "IntegerLiteralType"
- !private "LabeledStatement"
- "Parser"
- "ParserExpressionConfig"
- "ParserPatternConfig"
- !private "Pattern"
- !private "RepeatWhileStatement"
- "ReturnStatement"
- "SourceLocation"
- "SourceRange"
- "Statement"
- "Statements"
- !private "String"
- !private "StringLiteralType"
- !private "SwitchStatement"
- "TernaryPrecedence"
- "ThrowStatement"
- !private "Token"
- !private "UnicodeScalarType"
- !private "WhileStatement"
- !private "~="
depends-member:
- !private ["3AST7ASTNodeC", "Case"]
- !private ["3AST7ASTNodeC", "CatchClause"]
- !private ["3AST7ASTNodeC", "Kind"]
- !private ["3AST7ASTNodeC", "init"]
- !private ["3AST7ASTNodeC", "leftExpression"]
- !private ["3AST7ASTNodeC", "rightExpression"]
- !private ["3AST7ASTNodeC", "setSourceRange"]
- !private ["3AST7ASTNodeC", "sourceRange"]
- !private ["3AST14ASTNodeContextP", "Case"]
- !private ["3AST14ASTNodeContextP", "CatchClause"]
- !private ["3AST14ASTNodeContextP", "Kind"]
- !private ["3AST14ASTNodeContextP", "init"]
- !private ["3AST14ASTNodeContextP", "leftExpression"]
- !private ["3AST14ASTNodeContextP", "rightExpression"]
- !private ["3AST14ASTNodeContextP", "setSourceRange"]
- !private ["3AST14ASTNodeContextP", "sourceRange"]
- !private ["3AST20ASTTextRepresentableP", "Argument"]
- !private ["3AST20ASTTextRepresentableP", "Case"]
- !private ["3AST20ASTTextRepresentableP", "CatchClause"]
- !private ["3AST20ASTTextRepresentableP", "Item"]
- !private ["3AST20ASTTextRepresentableP", "Kind"]
- !private ["3AST20ASTTextRepresentableP", "all"]
- !private ["3AST20ASTTextRepresentableP", "availability"]
- !private ["3AST20ASTTextRepresentableP", "case"]
- !private ["3AST20ASTTextRepresentableP", "containOnlyPositiveDecimals"]
- !private ["3AST20ASTTextRepresentableP", "count"]
- !private ["3AST20ASTTextRepresentableP", "default"]
- !private ["3AST20ASTTextRepresentableP", "else"]
- !private ["3AST20ASTTextRepresentableP", "elseif"]
- !private ["3AST20ASTTextRepresentableP", "expression"]
- !private ["3AST20ASTTextRepresentableP", "init"]
- !private ["3AST20ASTTextRepresentableP", "leftExpression"]
- !private ["3AST20ASTTextRepresentableP", "let"]
- !private ["3AST20ASTTextRepresentableP", "major"]
- !private ["3AST20ASTTextRepresentableP", "minor"]
- !private ["3AST20ASTTextRepresentableP", "patch"]
- !private ["3AST20ASTTextRepresentableP", "rightExpression"]
- !private ["3AST20ASTTextRepresentableP", "setSourceRange"]
- !private ["3AST20ASTTextRepresentableP", "sourceRange"]
- !private ["3AST20ASTTextRepresentableP", "var"]
- !private ["3AST21AvailabilityConditionV8ArgumentO", "all"]
- !private ["3AST21AvailabilityConditionV8ArgumentO", "major"]
- !private ["3AST21AvailabilityConditionV8ArgumentO", "minor"]
- !private ["3AST21AvailabilityConditionV8ArgumentO", "patch"]
- !private ["Sa", "append"]
- !private ["Sa", "assignmentOperator"]
- !private ["Sa", "case"]
- !private ["Sa", "catch"]
- !private ["Sa", "colon"]
- !private ["Sa", "comma"]
- !private ["Sa", "contains"]
- !private ["Sa", "dot"]
- !private ["Sa", "dummyIdentifier"]
- !private ["Sa", "dummyIntegerLiteral"]
- !private ["Sa", "dummyStaticStringLiteral"]
- !private ["Sa", "else"]
- !private ["Sa", "if"]
- !private ["Sa", "in"]
- !private ["Sa", "init"]
- !private ["Sa", "isEmpty"]
- !private ["Sa", "leftBrace"]
- !private ["Sa", "leftParen"]
- !private ["Sa", "rightBrace"]
- !private ["Sa", "rightParen"]
- !private ["Sa", "where"]
- !private ["Sa", "while"]
- !private ["3AST28AssignmentOperatorExpressionC", "leftExpression"]
- !private ["3AST28AssignmentOperatorExpressionC", "rightExpression"]
- !private ["3AST21AvailabilityConditionV", "Argument"]
- !private ["3AST21AvailabilityConditionV", "init"]
- !private ["s23BidirectionalCollectionP", "append"]
- !private ["s23BidirectionalCollectionP", "assignmentOperator"]
- !private ["s23BidirectionalCollectionP", "case"]
- !private ["s23BidirectionalCollectionP", "catch"]
- !private ["s23BidirectionalCollectionP", "colon"]
- !private ["s23BidirectionalCollectionP", "comma"]
- !private ["s23BidirectionalCollectionP", "containOnlyPositiveDecimals"]
- !private ["s23BidirectionalCollectionP", "contains"]
- !private ["s23BidirectionalCollectionP", "count"]
- !private ["s23BidirectionalCollectionP", "dot"]
- !private ["s23BidirectionalCollectionP", "dummyIdentifier"]
- !private ["s23BidirectionalCollectionP", "dummyIntegerLiteral"]
- !private ["s23BidirectionalCollectionP", "dummyStaticStringLiteral"]
- !private ["s23BidirectionalCollectionP", "else"]
- !private ["s23BidirectionalCollectionP", "if"]
- !private ["s23BidirectionalCollectionP", "in"]
- !private ["s23BidirectionalCollectionP", "init"]
- !private ["s23BidirectionalCollectionP", "isEmpty"]
- !private ["s23BidirectionalCollectionP", "leftBrace"]
- !private ["s23BidirectionalCollectionP", "leftParen"]
- !private ["s23BidirectionalCollectionP", "rightBrace"]
- !private ["s23BidirectionalCollectionP", "rightParen"]
- !private ["s23BidirectionalCollectionP", "where"]
- !private ["s23BidirectionalCollectionP", "while"]
- !private ["3AST16BinaryExpressionP", "leftExpression"]
- !private ["3AST16BinaryExpressionP", "rightExpression"]
- !private ["s13BinaryIntegerP", "init"]
- !private ["Sb", "_getBuiltinLogicValue"]
- !private ["3AST14BreakStatementC", "init"]
- !private ["3AST14BreakStatementC", "setSourceRange"]
- !private ["s7CVarArgP", "append"]
- !private ["s7CVarArgP", "assignmentOperator"]
- !private ["s7CVarArgP", "case"]
- !private ["s7CVarArgP", "catch"]
- !private ["s7CVarArgP", "colon"]
- !private ["s7CVarArgP", "comma"]
- !private ["s7CVarArgP", "containOnlyPositiveDecimals"]
- !private ["s7CVarArgP", "contains"]
- !private ["s7CVarArgP", "count"]
- !private ["s7CVarArgP", "dot"]
- !private ["s7CVarArgP", "dummyIdentifier"]
- !private ["s7CVarArgP", "dummyIntegerLiteral"]
- !private ["s7CVarArgP", "dummyStaticStringLiteral"]
- !private ["s7CVarArgP", "else"]
- !private ["s7CVarArgP", "if"]
- !private ["s7CVarArgP", "in"]
- !private ["s7CVarArgP", "init"]
- !private ["s7CVarArgP", "isEmpty"]
- !private ["s7CVarArgP", "leftBrace"]
- !private ["s7CVarArgP", "leftParen"]
- !private ["s7CVarArgP", "rightBrace"]
- !private ["s7CVarArgP", "rightParen"]
- !private ["s7CVarArgP", "where"]
- !private ["s7CVarArgP", "while"]
- !private ["3AST15SwitchStatementC4CaseO", "Item"]
- !private ["3AST15SwitchStatementC4CaseO", "case"]
- !private ["3AST15SwitchStatementC4CaseO", "default"]
- !private ["3AST11DoStatementC11CatchClauseV", "init"]
- !private ["3AST9CodeBlockC", "sourceRange"]
- !private ["s10CollectionP", "append"]
- !private ["s10CollectionP", "assignmentOperator"]
- !private ["s10CollectionP", "case"]
- !private ["s10CollectionP", "catch"]
- !private ["s10CollectionP", "colon"]
- !private ["s10CollectionP", "comma"]
- !private ["s10CollectionP", "containOnlyPositiveDecimals"]
- !private ["s10CollectionP", "contains"]
- !private ["s10CollectionP", "count"]
- !private ["s10CollectionP", "dot"]
- !private ["s10CollectionP", "dummyIdentifier"]
- !private ["s10CollectionP", "dummyIntegerLiteral"]
- !private ["s10CollectionP", "dummyStaticStringLiteral"]
- !private ["s10CollectionP", "else"]
- !private ["s10CollectionP", "if"]
- !private ["s10CollectionP", "in"]
- !private ["s10CollectionP", "init"]
- !private ["s10CollectionP", "isEmpty"]
- !private ["s10CollectionP", "leftBrace"]
- !private ["s10CollectionP", "leftParen"]
- !private ["s10CollectionP", "rightBrace"]
- !private ["s10CollectionP", "rightParen"]
- !private ["s10CollectionP", "where"]
- !private ["s10CollectionP", "while"]
- !private ["s10ComparableP", "containOnlyPositiveDecimals"]
- !private ["s10ComparableP", "count"]
- !private ["s10ComparableP", "init"]
- !private ["3AST24CompilerControlStatementC", "Kind"]
- !private ["3AST24CompilerControlStatementC", "init"]
- !private ["3AST24CompilerControlStatementC", "setSourceRange"]
- !private ["3AST9ConditionO", "availability"]
- !private ["3AST9ConditionO", "case"]
- !private ["3AST9ConditionO", "expression"]
- !private ["3AST9ConditionO", "let"]
- !private ["3AST9ConditionO", "var"]
- !private ["3AST17ContinueStatementC", "init"]
- !private ["3AST17ContinueStatementC", "setSourceRange"]
- !private ["s28CustomDebugStringConvertibleP", "append"]
- !private ["s28CustomDebugStringConvertibleP", "assignmentOperator"]
- !private ["s28CustomDebugStringConvertibleP", "case"]
- !private ["s28CustomDebugStringConvertibleP", "catch"]
- !private ["s28CustomDebugStringConvertibleP", "colon"]
- !private ["s28CustomDebugStringConvertibleP", "comma"]
- !private ["s28CustomDebugStringConvertibleP", "containOnlyPositiveDecimals"]
- !private ["s28CustomDebugStringConvertibleP", "contains"]
- !private ["s28CustomDebugStringConvertibleP", "count"]
- !private ["s28CustomDebugStringConvertibleP", "dot"]
- !private ["s28CustomDebugStringConvertibleP", "dummyIdentifier"]
- !private ["s28CustomDebugStringConvertibleP", "dummyIntegerLiteral"]
- !private ["s28CustomDebugStringConvertibleP", "dummyStaticStringLiteral"]
- !private ["s28CustomDebugStringConvertibleP", "else"]
- !private ["s28CustomDebugStringConvertibleP", "elseif"]
- !private ["s28CustomDebugStringConvertibleP", "if"]
- !private ["s28CustomDebugStringConvertibleP", "in"]
- !private ["s28CustomDebugStringConvertibleP", "init"]
- !private ["s28CustomDebugStringConvertibleP", "isEmpty"]
- !private ["s28CustomDebugStringConvertibleP", "leftBrace"]
- !private ["s28CustomDebugStringConvertibleP", "leftParen"]
- !private ["s28CustomDebugStringConvertibleP", "rightBrace"]
- !private ["s28CustomDebugStringConvertibleP", "rightParen"]
- !private ["s28CustomDebugStringConvertibleP", "where"]
- !private ["s28CustomDebugStringConvertibleP", "while"]
- !private ["s29CustomPlaygroundQuickLookableP", "_getBuiltinLogicValue"]
- !private ["s29CustomPlaygroundQuickLookableP", "containOnlyPositiveDecimals"]
- !private ["s29CustomPlaygroundQuickLookableP", "count"]
- !private ["s29CustomPlaygroundQuickLookableP", "init"]
- !private ["s17CustomReflectableP", "_getBuiltinLogicValue"]
- !private ["s17CustomReflectableP", "append"]
- !private ["s17CustomReflectableP", "assignmentOperator"]
- !private ["s17CustomReflectableP", "case"]
- !private ["s17CustomReflectableP", "catch"]
- !private ["s17CustomReflectableP", "colon"]
- !private ["s17CustomReflectableP", "comma"]
- !private ["s17CustomReflectableP", "containOnlyPositiveDecimals"]
- !private ["s17CustomReflectableP", "contains"]
- !private ["s17CustomReflectableP", "count"]
- !private ["s17CustomReflectableP", "dot"]
- !private ["s17CustomReflectableP", "dummyIdentifier"]
- !private ["s17CustomReflectableP", "dummyIntegerLiteral"]
- !private ["s17CustomReflectableP", "dummyStaticStringLiteral"]
- !private ["s17CustomReflectableP", "else"]
- !private ["s17CustomReflectableP", "elseif"]
- !private ["s17CustomReflectableP", "if"]
- !private ["s17CustomReflectableP", "in"]
- !private ["s17CustomReflectableP", "init"]
- !private ["s17CustomReflectableP", "isEmpty"]
- !private ["s17CustomReflectableP", "leftBrace"]
- !private ["s17CustomReflectableP", "leftParen"]
- !private ["s17CustomReflectableP", "rightBrace"]
- !private ["s17CustomReflectableP", "rightParen"]
- !private ["s17CustomReflectableP", "where"]
- !private ["s17CustomReflectableP", "while"]
- !private ["s23CustomStringConvertibleP", "Argument"]
- !private ["s23CustomStringConvertibleP", "Case"]
- !private ["s23CustomStringConvertibleP", "CatchClause"]
- !private ["s23CustomStringConvertibleP", "Item"]
- !private ["s23CustomStringConvertibleP", "Kind"]
- !private ["s23CustomStringConvertibleP", "_getBuiltinLogicValue"]
- !private ["s23CustomStringConvertibleP", "all"]
- !private ["s23CustomStringConvertibleP", "append"]
- !private ["s23CustomStringConvertibleP", "assignmentOperator"]
- !private ["s23CustomStringConvertibleP", "availability"]
- !private ["s23CustomStringConvertibleP", "case"]
- !private ["s23CustomStringConvertibleP", "catch"]
- !private ["s23CustomStringConvertibleP", "colon"]
- !private ["s23CustomStringConvertibleP", "column"]
- !private ["s23CustomStringConvertibleP", "comma"]
- !private ["s23CustomStringConvertibleP", "containOnlyPositiveDecimals"]
- !private ["s23CustomStringConvertibleP", "contains"]
- !private ["s23CustomStringConvertibleP", "count"]
- !private ["s23CustomStringConvertibleP", "default"]
- !private ["s23CustomStringConvertibleP", "dot"]
- !private ["s23CustomStringConvertibleP", "dummyIdentifier"]
- !private ["s23CustomStringConvertibleP", "dummyIntegerLiteral"]
- !private ["s23CustomStringConvertibleP", "dummyStaticStringLiteral"]
- !private ["s23CustomStringConvertibleP", "else"]
- !private ["s23CustomStringConvertibleP", "elseif"]
- !private ["s23CustomStringConvertibleP", "end"]
- !private ["s23CustomStringConvertibleP", "expression"]
- !private ["s23CustomStringConvertibleP", "if"]
- !private ["s23CustomStringConvertibleP", "in"]
- !private ["s23CustomStringConvertibleP", "init"]
- !private ["s23CustomStringConvertibleP", "isEmpty"]
- !private ["s23CustomStringConvertibleP", "leftBrace"]
- !private ["s23CustomStringConvertibleP", "leftExpression"]
- !private ["s23CustomStringConvertibleP", "leftParen"]
- !private ["s23CustomStringConvertibleP", "let"]
- !private ["s23CustomStringConvertibleP", "major"]
- !private ["s23CustomStringConvertibleP", "minor"]
- !private ["s23CustomStringConvertibleP", "nextColumn"]
- !private ["s23CustomStringConvertibleP", "patch"]
- !private ["s23CustomStringConvertibleP", "rightBrace"]
- !private ["s23CustomStringConvertibleP", "rightExpression"]
- !private ["s23CustomStringConvertibleP", "rightParen"]
- !private ["s23CustomStringConvertibleP", "setSourceRange"]
- !private ["s23CustomStringConvertibleP", "sourceRange"]
- !private ["s23CustomStringConvertibleP", "start"]
- !private ["s23CustomStringConvertibleP", "var"]
- !private ["s23CustomStringConvertibleP", "where"]
- !private ["s23CustomStringConvertibleP", "while"]
- !private ["s9DecodableP", "_getBuiltinLogicValue"]
- !private ["s9DecodableP", "append"]
- !private ["s9DecodableP", "assignmentOperator"]
- !private ["s9DecodableP", "case"]
- !private ["s9DecodableP", "catch"]
- !private ["s9DecodableP", "colon"]
- !private ["s9DecodableP", "comma"]
- !private ["s9DecodableP", "containOnlyPositiveDecimals"]
- !private ["s9DecodableP", "contains"]
- !private ["s9DecodableP", "count"]
- !private ["s9DecodableP", "dot"]
- !private ["s9DecodableP", "dummyIdentifier"]
- !private ["s9DecodableP", "dummyIntegerLiteral"]
- !private ["s9DecodableP", "dummyStaticStringLiteral"]
- !private ["s9DecodableP", "else"]
- !private ["s9DecodableP", "elseif"]
- !private ["s9DecodableP", "if"]
- !private ["s9DecodableP", "in"]
- !private ["s9DecodableP", "init"]
- !private ["s9DecodableP", "isEmpty"]
- !private ["s9DecodableP", "leftBrace"]
- !private ["s9DecodableP", "leftParen"]
- !private ["s9DecodableP", "rightBrace"]
- !private ["s9DecodableP", "rightParen"]
- !private ["s9DecodableP", "where"]
- !private ["s9DecodableP", "while"]
- !private ["3AST14DeferStatementC", "init"]
- !private ["3AST14DeferStatementC", "setSourceRange"]
- !private ["10Diagnostic0A4KindP", "attributeAvailabilityPlatform"]
- !private ["10Diagnostic0A4KindP", "caseStmtWithoutBody"]
- !private ["10Diagnostic0A4KindP", "expectedAvailabilityVersionNumber"]
- !private ["10Diagnostic0A4KindP", "expectedAvailableKeyword"]
- !private ["10Diagnostic0A4KindP", "expectedCaseColon"]
- !private ["10Diagnostic0A4KindP", "expectedCloseParenAvailabilityCondition"]
- !private ["10Diagnostic0A4KindP", "expectedDefaultColon"]
- !private ["10Diagnostic0A4KindP", "expectedElseAfterGuard"]
- !private ["10Diagnostic0A4KindP", "expectedEqualInConditionalBinding"]
- !private ["10Diagnostic0A4KindP", "expectedForEachIn"]
- !private ["10Diagnostic0A4KindP", "expectedMinorVersionAvailability"]
- !private ["10Diagnostic0A4KindP", "expectedOpenParenAvailabilityCondition"]
- !private ["10Diagnostic0A4KindP", "expectedOpenParenSourceLocation"]
- !private ["10Diagnostic0A4KindP", "expectedValidCompilerCtrlKeyword"]
- !private ["10Diagnostic0A4KindP", "expectedWhileAfterRepeatBody"]
- !private ["10Diagnostic0A4KindP", "invalidLabelOnStatement"]
- !private ["10Diagnostic0A4KindP", "leftBraceExpected"]
- !private ["10Diagnostic0A4KindP", "rightBraceExpected"]
- !private ["10Diagnostic0A4KindP", "statementSameLineWithoutSemicolon"]
- !private ["3AST11DoStatementC", "CatchClause"]
- !private ["3AST11DoStatementC", "init"]
- !private ["3AST11DoStatementC", "setSourceRange"]
- !private ["3AST11IfStatementC10ElseClauseO", "else"]
- !private ["3AST11IfStatementC10ElseClauseO", "elseif"]
- !private ["s9EncodableP", "_getBuiltinLogicValue"]
- !private ["s9EncodableP", "append"]
- !private ["s9EncodableP", "assignmentOperator"]
- !private ["s9EncodableP", "case"]
- !private ["s9EncodableP", "catch"]
- !private ["s9EncodableP", "colon"]
- !private ["s9EncodableP", "comma"]
- !private ["s9EncodableP", "containOnlyPositiveDecimals"]
- !private ["s9EncodableP", "contains"]
- !private ["s9EncodableP", "count"]
- !private ["s9EncodableP", "dot"]
- !private ["s9EncodableP", "dummyIdentifier"]
- !private ["s9EncodableP", "dummyIntegerLiteral"]
- !private ["s9EncodableP", "dummyStaticStringLiteral"]
- !private ["s9EncodableP", "else"]
- !private ["s9EncodableP", "elseif"]
- !private ["s9EncodableP", "if"]
- !private ["s9EncodableP", "in"]
- !private ["s9EncodableP", "init"]
- !private ["s9EncodableP", "isEmpty"]
- !private ["s9EncodableP", "leftBrace"]
- !private ["s9EncodableP", "leftParen"]
- !private ["s9EncodableP", "rightBrace"]
- !private ["s9EncodableP", "rightParen"]
- !private ["s9EncodableP", "where"]
- !private ["s9EncodableP", "while"]
- !private ["s9EquatableP", "_getBuiltinLogicValue"]
- !private ["s9EquatableP", "assignmentOperator"]
- ["s9EquatableP", "at"]
- !private ["s9EquatableP", "binaryOperator"]
- ["s9EquatableP", "break"]
- ["s9EquatableP", "case"]
- !private ["s9EquatableP", "catch"]
- !private ["s9EquatableP", "colon"]
- !private ["s9EquatableP", "column"]
- !private ["s9EquatableP", "comma"]
- !private ["s9EquatableP", "containOnlyPositiveDecimals"]
- ["s9EquatableP", "continue"]
- !private ["s9EquatableP", "count"]
- ["s9EquatableP", "default"]
- ["s9EquatableP", "defer"]
- ["s9EquatableP", "deinit"]
- ["s9EquatableP", "do"]
- !private ["s9EquatableP", "dot"]
- !private ["s9EquatableP", "dummyBinaryOperator"]
- !private ["s9EquatableP", "dummyFloatingPointLiteral"]
- !private ["s9EquatableP", "dummyIdentifier"]
- !private ["s9EquatableP", "dummyIntegerLiteral"]
- !private ["s9EquatableP", "dummyStaticStringLiteral"]
- ["s9EquatableP", "else"]
- !private ["s9EquatableP", "end"]
- ["s9EquatableP", "enum"]
- ["s9EquatableP", "eof"]
- ["s9EquatableP", "extension"]
- ["s9EquatableP", "fallthrough"]
- !private ["s9EquatableP", "floatingPointLiteral"]
- ["s9EquatableP", "for"]
- ["s9EquatableP", "func"]
- ["s9EquatableP", "guard"]
- ["s9EquatableP", "hash"]
- ["s9EquatableP", "identifier"]
- ["s9EquatableP", "if"]
- ["s9EquatableP", "import"]
- !private ["s9EquatableP", "in"]
- ["s9EquatableP", "indirect"]
- ["s9EquatableP", "init"]
- ["s9EquatableP", "integerLiteral"]
- !private ["s9EquatableP", "isModifier"]
- !private ["s9EquatableP", "leftBrace"]
- !private ["s9EquatableP", "leftParen"]
- ["s9EquatableP", "let"]
- ["s9EquatableP", "lineFeed"]
- !private ["s9EquatableP", "nextColumn"]
- ["s9EquatableP", "operator"]
- ["s9EquatableP", "protocol"]
- ["s9EquatableP", "repeat"]
- ["s9EquatableP", "return"]
- ["s9EquatableP", "rightBrace"]
- !private ["s9EquatableP", "rightParen"]
- ["s9EquatableP", "semicolon"]
- !private ["s9EquatableP", "start"]
- ["s9EquatableP", "staticStringLiteral"]
- ["s9EquatableP", "struct"]
- ["s9EquatableP", "subscript"]
- ["s9EquatableP", "switch"]
- ["s9EquatableP", "throw"]
- ["s9EquatableP", "typealias"]
- ["s9EquatableP", "var"]
- !private ["s9EquatableP", "where"]
- ["s9EquatableP", "while"]
- !private ["s25ExpressibleByArrayLiteralP", "append"]
- !private ["s25ExpressibleByArrayLiteralP", "assignmentOperator"]
- !private ["s25ExpressibleByArrayLiteralP", "case"]
- !private ["s25ExpressibleByArrayLiteralP", "catch"]
- !private ["s25ExpressibleByArrayLiteralP", "colon"]
- !private ["s25ExpressibleByArrayLiteralP", "comma"]
- !private ["s25ExpressibleByArrayLiteralP", "contains"]
- !private ["s25ExpressibleByArrayLiteralP", "dot"]
- !private ["s25ExpressibleByArrayLiteralP", "dummyIdentifier"]
- !private ["s25ExpressibleByArrayLiteralP", "dummyIntegerLiteral"]
- !private ["s25ExpressibleByArrayLiteralP", "dummyStaticStringLiteral"]
- !private ["s25ExpressibleByArrayLiteralP", "else"]
- !private ["s25ExpressibleByArrayLiteralP", "if"]
- !private ["s25ExpressibleByArrayLiteralP", "in"]
- !private ["s25ExpressibleByArrayLiteralP", "init"]
- !private ["s25ExpressibleByArrayLiteralP", "isEmpty"]
- !private ["s25ExpressibleByArrayLiteralP", "leftBrace"]
- !private ["s25ExpressibleByArrayLiteralP", "leftParen"]
- !private ["s25ExpressibleByArrayLiteralP", "rightBrace"]
- !private ["s25ExpressibleByArrayLiteralP", "rightParen"]
- !private ["s25ExpressibleByArrayLiteralP", "where"]
- !private ["s25ExpressibleByArrayLiteralP", "while"]
- !private ["s27ExpressibleByBooleanLiteralP", "_getBuiltinLogicValue"]
- !private ["s43ExpressibleByExtendedGraphemeClusterLiteralP", "containOnlyPositiveDecimals"]
- !private ["s43ExpressibleByExtendedGraphemeClusterLiteralP", "count"]
- !private ["s43ExpressibleByExtendedGraphemeClusterLiteralP", "init"]
- !private ["s27ExpressibleByIntegerLiteralP", "init"]
- !private ["s23ExpressibleByNilLiteralP", "else"]
- !private ["s23ExpressibleByNilLiteralP", "elseif"]
- !private ["s23ExpressibleByNilLiteralP", "leftBrace"]
- !private ["s23ExpressibleByNilLiteralP", "rightBrace"]
- !private ["s23ExpressibleByNilLiteralP", "where"]
- !private ["s26ExpressibleByStringLiteralP", "containOnlyPositiveDecimals"]
- !private ["s26ExpressibleByStringLiteralP", "count"]
- !private ["s26ExpressibleByStringLiteralP", "init"]
- !private ["s33ExpressibleByUnicodeScalarLiteralP", "containOnlyPositiveDecimals"]
- !private ["s33ExpressibleByUnicodeScalarLiteralP", "count"]
- !private ["s33ExpressibleByUnicodeScalarLiteralP", "init"]
- !private ["3AST10ExpressionP", "leftExpression"]
- !private ["3AST10ExpressionP", "rightExpression"]
- !private ["3AST10ExpressionP", "sourceRange"]
- !private ["3AST17ExpressionPatternC", "expression"]
- !private ["3AST17ExpressionPatternC", "init"]
- !private ["3AST20FallthroughStatementC", "init"]
- !private ["3AST20FallthroughStatementC", "setSourceRange"]
- !private ["s17FixedWidthIntegerP", "init"]
- !private ["3AST14ForInStatementC", "init"]
- !private ["3AST14ForInStatementC", "setSourceRange"]
- !private ["3AST14GuardStatementC", "init"]
- !private ["3AST14GuardStatementC", "setSourceRange"]
- !private ["s8HashableP", "_getBuiltinLogicValue"]
- !private ["s8HashableP", "column"]
- !private ["s8HashableP", "containOnlyPositiveDecimals"]
- !private ["s8HashableP", "count"]
- !private ["s8HashableP", "end"]
- !private ["s8HashableP", "init"]
- !private ["s8HashableP", "nextColumn"]
- !private ["s8HashableP", "start"]
- !private ["3AST11IfStatementC", "init"]
- !private ["3AST11IfStatementC", "setSourceRange"]
- !private ["3AST11IfStatementC", "sourceRange"]
- !private ["Si", "init"]
- !private ["3AST15SwitchStatementC4CaseO4ItemV", "init"]
- !private ["3AST24CompilerControlStatementC4KindO", "else"]
- !private ["3AST24CompilerControlStatementC4KindO", "elseif"]
- !private ["3AST24CompilerControlStatementC4KindO", "endif"]
- !private ["3AST24CompilerControlStatementC4KindO", "if"]
- !private ["3AST24CompilerControlStatementC4KindO", "sourceLocation"]
- !private ["5Lexer5TokenV4KindO", "assignmentOperator"]
- ["5Lexer5TokenV4KindO", "at"]
- !private ["5Lexer5TokenV4KindO", "binaryOperator"]
- ["5Lexer5TokenV4KindO", "break"]
- ["5Lexer5TokenV4KindO", "case"]
- !private ["5Lexer5TokenV4KindO", "catch"]
- !private ["5Lexer5TokenV4KindO", "colon"]
- !private ["5Lexer5TokenV4KindO", "comma"]
- ["5Lexer5TokenV4KindO", "continue"]
- ["5Lexer5TokenV4KindO", "default"]
- ["5Lexer5TokenV4KindO", "defer"]
- ["5Lexer5TokenV4KindO", "deinit"]
- ["5Lexer5TokenV4KindO", "do"]
- !private ["5Lexer5TokenV4KindO", "dot"]
- !private ["5Lexer5TokenV4KindO", "dummyBinaryOperator"]
- !private ["5Lexer5TokenV4KindO", "dummyFloatingPointLiteral"]
- !private ["5Lexer5TokenV4KindO", "dummyIdentifier"]
- !private ["5Lexer5TokenV4KindO", "dummyIntegerLiteral"]
- !private ["5Lexer5TokenV4KindO", "dummyStaticStringLiteral"]
- ["5Lexer5TokenV4KindO", "else"]
- ["5Lexer5TokenV4KindO", "enum"]
- ["5Lexer5TokenV4KindO", "eof"]
- ["5Lexer5TokenV4KindO", "extension"]
- ["5Lexer5TokenV4KindO", "fallthrough"]
- !private ["5Lexer5TokenV4KindO", "floatingPointLiteral"]
- ["5Lexer5TokenV4KindO", "for"]
- ["5Lexer5TokenV4KindO", "func"]
- ["5Lexer5TokenV4KindO", "guard"]
- ["5Lexer5TokenV4KindO", "hash"]
- ["5Lexer5TokenV4KindO", "identifier"]
- ["5Lexer5TokenV4KindO", "if"]
- ["5Lexer5TokenV4KindO", "import"]
- !private ["5Lexer5TokenV4KindO", "in"]
- ["5Lexer5TokenV4KindO", "indirect"]
- ["5Lexer5TokenV4KindO", "init"]
- ["5Lexer5TokenV4KindO", "integerLiteral"]
- !private ["5Lexer5TokenV4KindO", "isModifier"]
- !private ["5Lexer5TokenV4KindO", "leftBrace"]
- !private ["5Lexer5TokenV4KindO", "leftParen"]
- ["5Lexer5TokenV4KindO", "let"]
- ["5Lexer5TokenV4KindO", "lineFeed"]
- ["5Lexer5TokenV4KindO", "operator"]
- ["5Lexer5TokenV4KindO", "protocol"]
- ["5Lexer5TokenV4KindO", "repeat"]
- ["5Lexer5TokenV4KindO", "return"]
- ["5Lexer5TokenV4KindO", "rightBrace"]
- !private ["5Lexer5TokenV4KindO", "rightParen"]
- ["5Lexer5TokenV4KindO", "semicolon"]
- ["5Lexer5TokenV4KindO", "staticStringLiteral"]
- ["5Lexer5TokenV4KindO", "struct"]
- ["5Lexer5TokenV4KindO", "subscript"]
- ["5Lexer5TokenV4KindO", "switch"]
- ["5Lexer5TokenV4KindO", "throw"]
- ["5Lexer5TokenV4KindO", "typealias"]
- ["5Lexer5TokenV4KindO", "var"]
- !private ["5Lexer5TokenV4KindO", "where"]
- ["5Lexer5TokenV4KindO", "while"]
- !private ["3AST16LabeledStatementC", "init"]
- !private ["3AST16LabeledStatementC", "setSourceRange"]
- !private ["5LexerAAC", "advance"]
- !private ["5LexerAAC", "examine"]
- !private ["5LexerAAC", "look"]
- !private ["5LexerAAC", "lookLineFeed"]
- !private ["5LexerAAC", "match"]
- !private ["5LexerAAC", "read"]
- !private ["5LexerAAC", "readUntilEOL"]
- !private ["3AST13LocatableNodeC", "Case"]
- !private ["3AST13LocatableNodeC", "CatchClause"]
- !private ["3AST13LocatableNodeC", "Kind"]
- !private ["3AST13LocatableNodeC", "expression"]
- !private ["3AST13LocatableNodeC", "init"]
- !private ["3AST13LocatableNodeC", "leftExpression"]
- !private ["3AST13LocatableNodeC", "rightExpression"]
- !private ["3AST13LocatableNodeC", "setSourceRange"]
- !private ["3AST13LocatableNodeC", "sourceRange"]
- !private ["s25LosslessStringConvertibleP", "_getBuiltinLogicValue"]
- !private ["s25LosslessStringConvertibleP", "containOnlyPositiveDecimals"]
- !private ["s25LosslessStringConvertibleP", "count"]
- !private ["s25LosslessStringConvertibleP", "init"]
- !private ["s10MirrorPathP", "containOnlyPositiveDecimals"]
- !private ["s10MirrorPathP", "count"]
- !private ["s10MirrorPathP", "init"]
- !private ["s17MutableCollectionP", "append"]
- !private ["s17MutableCollectionP", "assignmentOperator"]
- !private ["s17MutableCollectionP", "case"]
- !private ["s17MutableCollectionP", "catch"]
- !private ["s17MutableCollectionP", "colon"]
- !private ["s17MutableCollectionP", "comma"]
- !private ["s17MutableCollectionP", "contains"]
- !private ["s17MutableCollectionP", "dot"]
- !private ["s17MutableCollectionP", "dummyIdentifier"]
- !private ["s17MutableCollectionP", "dummyIntegerLiteral"]
- !private ["s17MutableCollectionP", "dummyStaticStringLiteral"]
- !private ["s17MutableCollectionP", "else"]
- !private ["s17MutableCollectionP", "if"]
- !private ["s17MutableCollectionP", "in"]
- !private ["s17MutableCollectionP", "init"]
- !private ["s17MutableCollectionP", "isEmpty"]
- !private ["s17MutableCollectionP", "leftBrace"]
- !private ["s17MutableCollectionP", "leftParen"]
- !private ["s17MutableCollectionP", "rightBrace"]
- !private ["s17MutableCollectionP", "rightParen"]
- !private ["s17MutableCollectionP", "where"]
- !private ["s17MutableCollectionP", "while"]
- !private ["So8NSCodingP", "containOnlyPositiveDecimals"]
- !private ["So8NSCodingP", "count"]
- !private ["So8NSCodingP", "init"]
- !private ["So9NSCopyingP", "containOnlyPositiveDecimals"]
- !private ["So9NSCopyingP", "count"]
- !private ["So9NSCopyingP", "init"]
- !private ["So21NSItemProviderReadingP", "containOnlyPositiveDecimals"]
- !private ["So21NSItemProviderReadingP", "count"]
- !private ["So21NSItemProviderReadingP", "init"]
- !private ["So21NSItemProviderWritingP", "containOnlyPositiveDecimals"]
- !private ["So21NSItemProviderWritingP", "count"]
- !private ["So21NSItemProviderWritingP", "init"]
- !private ["So16NSMutableCopyingP", "containOnlyPositiveDecimals"]
- !private ["So16NSMutableCopyingP", "count"]
- !private ["So16NSMutableCopyingP", "init"]
- !private ["So8NSObjectC", "containOnlyPositiveDecimals"]
- !private ["So8NSObjectC", "count"]
- !private ["So16NSObjectProtocolP", "containOnlyPositiveDecimals"]
- !private ["So16NSObjectProtocolP", "count"]
- !private ["So16NSObjectProtocolP", "init"]
- !private ["So14NSSecureCodingP", "containOnlyPositiveDecimals"]
- !private ["So14NSSecureCodingP", "count"]
- !private ["So14NSSecureCodingP", "init"]
- !private ["So8NSStringC", "containOnlyPositiveDecimals"]
- !private ["So8NSStringC", "count"]
- !private ["So8NSStringC", "init"]
- !private ["s7NumericP", "init"]
- !private ["Sq", "else"]
- !private ["Sq", "elseif"]
- !private ["Sq", "leftBrace"]
- !private ["Sq", "rightBrace"]
- !private ["Sq", "where"]
- !private ["6ParserAAC", "AssignmentOperatorExpression"]
- !private ["6ParserAAC", "AvailabilityCondition"]
- !private ["6ParserAAC", "Bool"]
- ["6ParserAAC", "BreakStatement"]
- ["6ParserAAC", "CompilerControlStatement"]
- !private ["6ParserAAC", "Condition"]
- !private ["6ParserAAC", "ConditionList"]
- ["6ParserAAC", "ContinueStatement"]
- ["6ParserAAC", "DeferStatement"]
- !private ["6ParserAAC", "DoStatement"]
- !private ["6ParserAAC", "Expression"]
- !private ["6ParserAAC", "ExpressionPattern"]
- !private ["6ParserAAC", "FallthroughStatement"]
- !private ["6ParserAAC", "ForInStatement"]
- !private ["6ParserAAC", "GuardStatement"]
- !private ["6ParserAAC", "IfStatement"]
- !private ["6ParserAAC", "Int"]
- !private ["6ParserAAC", "LabeledStatement"]
- ["6ParserAAC", "ParserExpressionConfig"]
- ["6ParserAAC", "ParserPatternConfig"]
- !private ["6ParserAAC", "Pattern"]
- !private ["6ParserAAC", "RepeatWhileStatement"]
- ["6ParserAAC", "ReturnStatement"]
- ["6ParserAAC", "SourceLocation"]
- ["6ParserAAC", "SourceRange"]
- ["6ParserAAC", "Statement"]
- ["6ParserAAC", "Statements"]
- !private ["6ParserAAC", "String"]
- !private ["6ParserAAC", "SwitchStatement"]
- ["6ParserAAC", "ThrowStatement"]
- !private ["6ParserAAC", "Token"]
- !private ["6ParserAAC", "WhileStatement"]
- !private ["6ParserAAC", "_lexer"]
- !private ["6ParserAAC", "_raiseError"]
- !private ["6ParserAAC", "_raiseFatal"]
- !private ["6ParserAAC", "forPatternMatchingConfig"]
- !private ["6ParserAAC", "getEndLocation"]
- !private ["6ParserAAC", "getLookedRange"]
- !private ["6ParserAAC", "getStartLocation"]
- !private ["6ParserAAC", "noTrailingConfig"]
- !private ["6ParserAAC", "parseAvailabilityCondition"]
- ["6ParserAAC", "parseBreakStatement"]
- !private ["6ParserAAC", "parseCaseCondition"]
- !private ["6ParserAAC", "parseCodeBlock"]
- ["6ParserAAC", "parseCompilerControlStatement"]
- !private ["6ParserAAC", "parseCondition"]
- !private ["6ParserAAC", "parseConditionList"]
- ["6ParserAAC", "parseContinueStatement"]
- !private ["6ParserAAC", "parseDeclaration"]
- ["6ParserAAC", "parseDeferStatement"]
- !private ["6ParserAAC", "parseDoStatement"]
- !private ["6ParserAAC", "parseExpression"]
- !private ["6ParserAAC", "parseForInStatement"]
- !private ["6ParserAAC", "parseGuardStatement"]
- !private ["6ParserAAC", "parseIfStatement"]
- !private ["6ParserAAC", "parseLabeledStatement"]
- !private ["6ParserAAC", "parsePattern"]
- !private ["6ParserAAC", "parseRepeatWhileStatement"]
- ["6ParserAAC", "parseReturnStatement"]
- ["6ParserAAC", "parseStatement"]
- ["6ParserAAC", "parseStatements"]
- !private ["6ParserAAC", "parseSwitchStatement"]
- ["6ParserAAC", "parseThrowStatement"]
- !private ["6ParserAAC", "parseWhileStatement"]
- !private ["6ParserAAC", "splitDoubleRawToTwoIntegers"]
- !private ["6Parser0A9ErrorKindO", "attributeAvailabilityPlatform"]
- !private ["6Parser0A9ErrorKindO", "caseStmtWithoutBody"]
- !private ["6Parser0A9ErrorKindO", "expectedAvailabilityVersionNumber"]
- !private ["6Parser0A9ErrorKindO", "expectedAvailableKeyword"]
- !private ["6Parser0A9ErrorKindO", "expectedCaseColon"]
- !private ["6Parser0A9ErrorKindO", "expectedCloseParenAvailabilityCondition"]
- !private ["6Parser0A9ErrorKindO", "expectedDefaultColon"]
- !private ["6Parser0A9ErrorKindO", "expectedElseAfterGuard"]
- !private ["6Parser0A9ErrorKindO", "expectedEqualInConditionalBinding"]
- !private ["6Parser0A9ErrorKindO", "expectedForEachIn"]
- !private ["6Parser0A9ErrorKindO", "expectedMinorVersionAvailability"]
- !private ["6Parser0A9ErrorKindO", "expectedOpenParenAvailabilityCondition"]
- !private ["6Parser0A9ErrorKindO", "expectedOpenParenSourceLocation"]
- !private ["6Parser0A9ErrorKindO", "expectedValidCompilerCtrlKeyword"]
- !private ["6Parser0A9ErrorKindO", "expectedWhileAfterRepeatBody"]
- !private ["6Parser0A9ErrorKindO", "invalidLabelOnStatement"]
- !private ["6Parser0A9ErrorKindO", "leftBraceExpected"]
- !private ["6Parser0A9ErrorKindO", "rightBraceExpected"]
- !private ["6Parser0A9ErrorKindO", "statementSameLineWithoutSemicolon"]
- !private ["6Parser0A16ExpressionConfigV", "init"]
- !private ["6Parser0A13PatternConfigV", "forPatternMatching"]
- !private ["6Parser0A13PatternConfigV", "init"]
- !private ["6Parser0A13PatternConfigV", "parseTrailingClosure"]
- !private ["3AST7PatternP", "expression"]
- !private ["3AST7PatternP", "init"]
- !private ["3AST11PatternBaseC", "expression"]
- !private ["s22RandomAccessCollectionP", "append"]
- !private ["s22RandomAccessCollectionP", "assignmentOperator"]
- !private ["s22RandomAccessCollectionP", "case"]
- !private ["s22RandomAccessCollectionP", "catch"]
- !private ["s22RandomAccessCollectionP", "colon"]
- !private ["s22RandomAccessCollectionP", "comma"]
- !private ["s22RandomAccessCollectionP", "contains"]
- !private ["s22RandomAccessCollectionP", "dot"]
- !private ["s22RandomAccessCollectionP", "dummyIdentifier"]
- !private ["s22RandomAccessCollectionP", "dummyIntegerLiteral"]
- !private ["s22RandomAccessCollectionP", "dummyStaticStringLiteral"]
- !private ["s22RandomAccessCollectionP", "else"]
- !private ["s22RandomAccessCollectionP", "if"]
- !private ["s22RandomAccessCollectionP", "in"]
- !private ["s22RandomAccessCollectionP", "init"]
- !private ["s22RandomAccessCollectionP", "isEmpty"]
- !private ["s22RandomAccessCollectionP", "leftBrace"]
- !private ["s22RandomAccessCollectionP", "leftParen"]
- !private ["s22RandomAccessCollectionP", "rightBrace"]
- !private ["s22RandomAccessCollectionP", "rightParen"]
- !private ["s22RandomAccessCollectionP", "where"]
- !private ["s22RandomAccessCollectionP", "while"]
- !private ["s26RangeReplaceableCollectionP", "append"]
- !private ["s26RangeReplaceableCollectionP", "assignmentOperator"]
- !private ["s26RangeReplaceableCollectionP", "case"]
- !private ["s26RangeReplaceableCollectionP", "catch"]
- !private ["s26RangeReplaceableCollectionP", "colon"]
- !private ["s26RangeReplaceableCollectionP", "comma"]
- !private ["s26RangeReplaceableCollectionP", "containOnlyPositiveDecimals"]
- !private ["s26RangeReplaceableCollectionP", "contains"]
- !private ["s26RangeReplaceableCollectionP", "count"]
- !private ["s26RangeReplaceableCollectionP", "dot"]
- !private ["s26RangeReplaceableCollectionP", "dummyIdentifier"]
- !private ["s26RangeReplaceableCollectionP", "dummyIntegerLiteral"]
- !private ["s26RangeReplaceableCollectionP", "dummyStaticStringLiteral"]
- !private ["s26RangeReplaceableCollectionP", "else"]
- !private ["s26RangeReplaceableCollectionP", "if"]
- !private ["s26RangeReplaceableCollectionP", "in"]
- !private ["s26RangeReplaceableCollectionP", "init"]
- !private ["s26RangeReplaceableCollectionP", "isEmpty"]
- !private ["s26RangeReplaceableCollectionP", "leftBrace"]
- !private ["s26RangeReplaceableCollectionP", "leftParen"]
- !private ["s26RangeReplaceableCollectionP", "rightBrace"]
- !private ["s26RangeReplaceableCollectionP", "rightParen"]
- !private ["s26RangeReplaceableCollectionP", "where"]
- !private ["s26RangeReplaceableCollectionP", "while"]
- !private ["3AST20RepeatWhileStatementC", "init"]
- !private ["3AST20RepeatWhileStatementC", "setSourceRange"]
- !private ["3AST15ReturnStatementC", "init"]
- !private ["3AST15ReturnStatementC", "setSourceRange"]
- !private ["s8SequenceP", "append"]
- !private ["s8SequenceP", "assignmentOperator"]
- !private ["s8SequenceP", "case"]
- !private ["s8SequenceP", "catch"]
- !private ["s8SequenceP", "colon"]
- !private ["s8SequenceP", "comma"]
- !private ["s8SequenceP", "containOnlyPositiveDecimals"]
- !private ["s8SequenceP", "contains"]
- !private ["s8SequenceP", "count"]
- !private ["s8SequenceP", "dot"]
- !private ["s8SequenceP", "dummyIdentifier"]
- !private ["s8SequenceP", "dummyIntegerLiteral"]
- !private ["s8SequenceP", "dummyStaticStringLiteral"]
- !private ["s8SequenceP", "else"]
- !private ["s8SequenceP", "if"]
- !private ["s8SequenceP", "in"]
- !private ["s8SequenceP", "init"]
- !private ["s8SequenceP", "isEmpty"]
- !private ["s8SequenceP", "leftBrace"]
- !private ["s8SequenceP", "leftParen"]
- !private ["s8SequenceP", "rightBrace"]
- !private ["s8SequenceP", "rightParen"]
- !private ["s8SequenceP", "where"]
- !private ["s8SequenceP", "while"]
- !private ["s13SignedIntegerP", "init"]
- !private ["s13SignedNumericP", "init"]
- !private ["6Source0A9LocatableP", "Case"]
- !private ["6Source0A9LocatableP", "CatchClause"]
- !private ["6Source0A9LocatableP", "Kind"]
- !private ["6Source0A9LocatableP", "expression"]
- !private ["6Source0A9LocatableP", "init"]
- !private ["6Source0A9LocatableP", "kind"]
- !private ["6Source0A9LocatableP", "leftExpression"]
- !private ["6Source0A9LocatableP", "rightExpression"]
- !private ["6Source0A9LocatableP", "setSourceRange"]
- !private ["6Source0A9LocatableP", "sourceRange"]
- !private ["6Source0A8LocationV", "column"]
- !private ["6Source0A8LocationV", "nextColumn"]
- !private ["6Source0A5RangeV", "end"]
- !private ["6Source0A5RangeV", "start"]
- !private ["3AST9StatementP", "Case"]
- !private ["3AST9StatementP", "CatchClause"]
- !private ["3AST9StatementP", "Kind"]
- !private ["3AST9StatementP", "init"]
- !private ["3AST9StatementP", "leftExpression"]
- !private ["3AST9StatementP", "rightExpression"]
- !private ["3AST9StatementP", "setSourceRange"]
- !private ["3AST9StatementP", "sourceRange"]
- !private ["s10StrideableP", "init"]
- !private ["SS", "containOnlyPositiveDecimals"]
- !private ["SS", "count"]
- !private ["SS", "init"]
- !private ["s14StringProtocolP", "containOnlyPositiveDecimals"]
- !private ["s14StringProtocolP", "count"]
- !private ["s14StringProtocolP", "init"]
- !private ["3AST15SwitchStatementC", "Case"]
- !private ["3AST15SwitchStatementC", "init"]
- !private ["3AST15SwitchStatementC", "setSourceRange"]
- !private ["s16TextOutputStreamP", "containOnlyPositiveDecimals"]
- !private ["s16TextOutputStreamP", "count"]
- !private ["s16TextOutputStreamP", "init"]
- !private ["s20TextOutputStreamableP", "containOnlyPositiveDecimals"]
- !private ["s20TextOutputStreamableP", "count"]
- !private ["s20TextOutputStreamableP", "init"]
- !private ["3AST14ThrowStatementC", "init"]
- !private ["3AST14ThrowStatementC", "setSourceRange"]
- !private ["5Lexer5TokenV", "Kind"]
- !private ["5Lexer5TokenV", "kind"]
- !private ["5Lexer5TokenV", "sourceRange"]
- !private ["3AST14WhileStatementC", "init"]
- !private ["3AST14WhileStatementC", "setSourceRange"]
- !private ["s14_ArrayProtocolP", "append"]
- !private ["s14_ArrayProtocolP", "assignmentOperator"]
- !private ["s14_ArrayProtocolP", "case"]
- !private ["s14_ArrayProtocolP", "catch"]
- !private ["s14_ArrayProtocolP", "colon"]
- !private ["s14_ArrayProtocolP", "comma"]
- !private ["s14_ArrayProtocolP", "contains"]
- !private ["s14_ArrayProtocolP", "dot"]
- !private ["s14_ArrayProtocolP", "dummyIdentifier"]
- !private ["s14_ArrayProtocolP", "dummyIntegerLiteral"]
- !private ["s14_ArrayProtocolP", "dummyStaticStringLiteral"]
- !private ["s14_ArrayProtocolP", "else"]
- !private ["s14_ArrayProtocolP", "if"]
- !private ["s14_ArrayProtocolP", "in"]
- !private ["s14_ArrayProtocolP", "init"]
- !private ["s14_ArrayProtocolP", "isEmpty"]
- !private ["s14_ArrayProtocolP", "leftBrace"]
- !private ["s14_ArrayProtocolP", "leftParen"]
- !private ["s14_ArrayProtocolP", "rightBrace"]
- !private ["s14_ArrayProtocolP", "rightParen"]
- !private ["s14_ArrayProtocolP", "where"]
- !private ["s14_ArrayProtocolP", "while"]
- !private ["s23_BidirectionalIndexableP", "append"]
- !private ["s23_BidirectionalIndexableP", "assignmentOperator"]
- !private ["s23_BidirectionalIndexableP", "case"]
- !private ["s23_BidirectionalIndexableP", "catch"]
- !private ["s23_BidirectionalIndexableP", "colon"]
- !private ["s23_BidirectionalIndexableP", "comma"]
- !private ["s23_BidirectionalIndexableP", "containOnlyPositiveDecimals"]
- !private ["s23_BidirectionalIndexableP", "contains"]
- !private ["s23_BidirectionalIndexableP", "count"]
- !private ["s23_BidirectionalIndexableP", "dot"]
- !private ["s23_BidirectionalIndexableP", "dummyIdentifier"]
- !private ["s23_BidirectionalIndexableP", "dummyIntegerLiteral"]
- !private ["s23_BidirectionalIndexableP", "dummyStaticStringLiteral"]
- !private ["s23_BidirectionalIndexableP", "else"]
- !private ["s23_BidirectionalIndexableP", "if"]
- !private ["s23_BidirectionalIndexableP", "in"]
- !private ["s23_BidirectionalIndexableP", "init"]
- !private ["s23_BidirectionalIndexableP", "isEmpty"]
- !private ["s23_BidirectionalIndexableP", "leftBrace"]
- !private ["s23_BidirectionalIndexableP", "leftParen"]
- !private ["s23_BidirectionalIndexableP", "rightBrace"]
- !private ["s23_BidirectionalIndexableP", "rightParen"]
- !private ["s23_BidirectionalIndexableP", "where"]
- !private ["s23_BidirectionalIndexableP", "while"]
- !private ["s18_BitwiseOperationsP", "init"]
- !private ["s24_DestructorSafeContainerP", "append"]
- !private ["s24_DestructorSafeContainerP", "assignmentOperator"]
- !private ["s24_DestructorSafeContainerP", "case"]
- !private ["s24_DestructorSafeContainerP", "catch"]
- !private ["s24_DestructorSafeContainerP", "colon"]
- !private ["s24_DestructorSafeContainerP", "comma"]
- !private ["s24_DestructorSafeContainerP", "contains"]
- !private ["s24_DestructorSafeContainerP", "dot"]
- !private ["s24_DestructorSafeContainerP", "dummyIdentifier"]
- !private ["s24_DestructorSafeContainerP", "dummyIntegerLiteral"]
- !private ["s24_DestructorSafeContainerP", "dummyStaticStringLiteral"]
- !private ["s24_DestructorSafeContainerP", "else"]
- !private ["s24_DestructorSafeContainerP", "if"]
- !private ["s24_DestructorSafeContainerP", "in"]
- !private ["s24_DestructorSafeContainerP", "init"]
- !private ["s24_DestructorSafeContainerP", "isEmpty"]
- !private ["s24_DestructorSafeContainerP", "leftBrace"]
- !private ["s24_DestructorSafeContainerP", "leftParen"]
- !private ["s24_DestructorSafeContainerP", "rightBrace"]
- !private ["s24_DestructorSafeContainerP", "rightParen"]
- !private ["s24_DestructorSafeContainerP", "where"]
- !private ["s24_DestructorSafeContainerP", "while"]
- !private ["s35_ExpressibleByBuiltinBooleanLiteralP", "_getBuiltinLogicValue"]
- !private ["s51_ExpressibleByBuiltinExtendedGraphemeClusterLiteralP", "containOnlyPositiveDecimals"]
- !private ["s51_ExpressibleByBuiltinExtendedGraphemeClusterLiteralP", "count"]
- !private ["s51_ExpressibleByBuiltinExtendedGraphemeClusterLiteralP", "init"]
- !private ["s35_ExpressibleByBuiltinIntegerLiteralP", "init"]
- !private ["s34_ExpressibleByBuiltinStringLiteralP", "containOnlyPositiveDecimals"]
- !private ["s34_ExpressibleByBuiltinStringLiteralP", "count"]
- !private ["s34_ExpressibleByBuiltinStringLiteralP", "init"]
- !private ["s39_ExpressibleByBuiltinUTF16StringLiteralP", "containOnlyPositiveDecimals"]
- !private ["s39_ExpressibleByBuiltinUTF16StringLiteralP", "count"]
- !private ["s39_ExpressibleByBuiltinUTF16StringLiteralP", "init"]
- !private ["s41_ExpressibleByBuiltinUnicodeScalarLiteralP", "containOnlyPositiveDecimals"]
- !private ["s41_ExpressibleByBuiltinUnicodeScalarLiteralP", "count"]
- !private ["s41_ExpressibleByBuiltinUnicodeScalarLiteralP", "init"]
- !private ["s33_ExpressibleByStringInterpolationP", "containOnlyPositiveDecimals"]
- !private ["s33_ExpressibleByStringInterpolationP", "count"]
- !private ["s33_ExpressibleByStringInterpolationP", "init"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "containOnlyPositiveDecimals"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "count"]
- !private ["s35_HasCustomAnyHashableRepresentationP", "init"]
- !private ["s10_IndexableP", "append"]
- !private ["s10_IndexableP", "assignmentOperator"]
- !private ["s10_IndexableP", "case"]
- !private ["s10_IndexableP", "catch"]
- !private ["s10_IndexableP", "colon"]
- !private ["s10_IndexableP", "comma"]
- !private ["s10_IndexableP", "containOnlyPositiveDecimals"]
- !private ["s10_IndexableP", "contains"]
- !private ["s10_IndexableP", "count"]
- !private ["s10_IndexableP", "dot"]
- !private ["s10_IndexableP", "dummyIdentifier"]
- !private ["s10_IndexableP", "dummyIntegerLiteral"]
- !private ["s10_IndexableP", "dummyStaticStringLiteral"]
- !private ["s10_IndexableP", "else"]
- !private ["s10_IndexableP", "if"]
- !private ["s10_IndexableP", "in"]
- !private ["s10_IndexableP", "init"]
- !private ["s10_IndexableP", "isEmpty"]
- !private ["s10_IndexableP", "leftBrace"]
- !private ["s10_IndexableP", "leftParen"]
- !private ["s10_IndexableP", "rightBrace"]
- !private ["s10_IndexableP", "rightParen"]
- !private ["s10_IndexableP", "where"]
- !private ["s10_IndexableP", "while"]
- !private ["s14_IndexableBaseP", "append"]
- !private ["s14_IndexableBaseP", "assignmentOperator"]
- !private ["s14_IndexableBaseP", "case"]
- !private ["s14_IndexableBaseP", "catch"]
- !private ["s14_IndexableBaseP", "colon"]
- !private ["s14_IndexableBaseP", "comma"]
- !private ["s14_IndexableBaseP", "containOnlyPositiveDecimals"]
- !private ["s14_IndexableBaseP", "contains"]
- !private ["s14_IndexableBaseP", "count"]
- !private ["s14_IndexableBaseP", "dot"]
- !private ["s14_IndexableBaseP", "dummyIdentifier"]
- !private ["s14_IndexableBaseP", "dummyIntegerLiteral"]
- !private ["s14_IndexableBaseP", "dummyStaticStringLiteral"]
- !private ["s14_IndexableBaseP", "else"]
- !private ["s14_IndexableBaseP", "if"]
- !private ["s14_IndexableBaseP", "in"]
- !private ["s14_IndexableBaseP", "init"]
- !private ["s14_IndexableBaseP", "isEmpty"]
- !private ["s14_IndexableBaseP", "leftBrace"]
- !private ["s14_IndexableBaseP", "leftParen"]
- !private ["s14_IndexableBaseP", "rightBrace"]
- !private ["s14_IndexableBaseP", "rightParen"]
- !private ["s14_IndexableBaseP", "where"]
- !private ["s14_IndexableBaseP", "while"]
- !private ["10Foundation27_KeyValueCodingAndObservingP", "containOnlyPositiveDecimals"]
- !private ["10Foundation27_KeyValueCodingAndObservingP", "count"]
- !private ["10Foundation27_KeyValueCodingAndObservingP", "init"]
- !private ["s17_MutableIndexableP", "append"]
- !private ["s17_MutableIndexableP", "assignmentOperator"]
- !private ["s17_MutableIndexableP", "case"]
- !private ["s17_MutableIndexableP", "catch"]
- !private ["s17_MutableIndexableP", "colon"]
- !private ["s17_MutableIndexableP", "comma"]
- !private ["s17_MutableIndexableP", "contains"]
- !private ["s17_MutableIndexableP", "dot"]
- !private ["s17_MutableIndexableP", "dummyIdentifier"]
- !private ["s17_MutableIndexableP", "dummyIntegerLiteral"]
- !private ["s17_MutableIndexableP", "dummyStaticStringLiteral"]
- !private ["s17_MutableIndexableP", "else"]
- !private ["s17_MutableIndexableP", "if"]
- !private ["s17_MutableIndexableP", "in"]
- !private ["s17_MutableIndexableP", "init"]
- !private ["s17_MutableIndexableP", "isEmpty"]
- !private ["s17_MutableIndexableP", "leftBrace"]
- !private ["s17_MutableIndexableP", "leftParen"]
- !private ["s17_MutableIndexableP", "rightBrace"]
- !private ["s17_MutableIndexableP", "rightParen"]
- !private ["s17_MutableIndexableP", "where"]
- !private ["s17_MutableIndexableP", "while"]
- !private ["s21_ObjectiveCBridgeableP", "_getBuiltinLogicValue"]
- !private ["s21_ObjectiveCBridgeableP", "append"]
- !private ["s21_ObjectiveCBridgeableP", "assignmentOperator"]
- !private ["s21_ObjectiveCBridgeableP", "case"]
- !private ["s21_ObjectiveCBridgeableP", "catch"]
- !private ["s21_ObjectiveCBridgeableP", "colon"]
- !private ["s21_ObjectiveCBridgeableP", "comma"]
- !private ["s21_ObjectiveCBridgeableP", "containOnlyPositiveDecimals"]
- !private ["s21_ObjectiveCBridgeableP", "contains"]
- !private ["s21_ObjectiveCBridgeableP", "count"]
- !private ["s21_ObjectiveCBridgeableP", "dot"]
- !private ["s21_ObjectiveCBridgeableP", "dummyIdentifier"]
- !private ["s21_ObjectiveCBridgeableP", "dummyIntegerLiteral"]
- !private ["s21_ObjectiveCBridgeableP", "dummyStaticStringLiteral"]
- !private ["s21_ObjectiveCBridgeableP", "else"]
- !private ["s21_ObjectiveCBridgeableP", "elseif"]
- !private ["s21_ObjectiveCBridgeableP", "if"]
- !private ["s21_ObjectiveCBridgeableP", "in"]
- !private ["s21_ObjectiveCBridgeableP", "init"]
- !private ["s21_ObjectiveCBridgeableP", "isEmpty"]
- !private ["s21_ObjectiveCBridgeableP", "leftBrace"]
- !private ["s21_ObjectiveCBridgeableP", "leftParen"]
- !private ["s21_ObjectiveCBridgeableP", "rightBrace"]
- !private ["s21_ObjectiveCBridgeableP", "rightParen"]
- !private ["s21_ObjectiveCBridgeableP", "where"]
- !private ["s21_ObjectiveCBridgeableP", "while"]
- !private ["s26_OptionalNilComparisonTypeV", "leftBrace"]
- !private ["s26_OptionalNilComparisonTypeV", "rightBrace"]
- !private ["s26_OptionalNilComparisonTypeV", "where"]
- !private ["s22_RandomAccessIndexableP", "append"]
- !private ["s22_RandomAccessIndexableP", "assignmentOperator"]
- !private ["s22_RandomAccessIndexableP", "case"]
- !private ["s22_RandomAccessIndexableP", "catch"]
- !private ["s22_RandomAccessIndexableP", "colon"]
- !private ["s22_RandomAccessIndexableP", "comma"]
- !private ["s22_RandomAccessIndexableP", "contains"]
- !private ["s22_RandomAccessIndexableP", "dot"]
- !private ["s22_RandomAccessIndexableP", "dummyIdentifier"]
- !private ["s22_RandomAccessIndexableP", "dummyIntegerLiteral"]
- !private ["s22_RandomAccessIndexableP", "dummyStaticStringLiteral"]
- !private ["s22_RandomAccessIndexableP", "else"]
- !private ["s22_RandomAccessIndexableP", "if"]
- !private ["s22_RandomAccessIndexableP", "in"]
- !private ["s22_RandomAccessIndexableP", "init"]
- !private ["s22_RandomAccessIndexableP", "isEmpty"]
- !private ["s22_RandomAccessIndexableP", "leftBrace"]
- !private ["s22_RandomAccessIndexableP", "leftParen"]
- !private ["s22_RandomAccessIndexableP", "rightBrace"]
- !private ["s22_RandomAccessIndexableP", "rightParen"]
- !private ["s22_RandomAccessIndexableP", "where"]
- !private ["s22_RandomAccessIndexableP", "while"]
- !private ["s26_RangeReplaceableIndexableP", "append"]
- !private ["s26_RangeReplaceableIndexableP", "assignmentOperator"]
- !private ["s26_RangeReplaceableIndexableP", "case"]
- !private ["s26_RangeReplaceableIndexableP", "catch"]
- !private ["s26_RangeReplaceableIndexableP", "colon"]
- !private ["s26_RangeReplaceableIndexableP", "comma"]
- !private ["s26_RangeReplaceableIndexableP", "containOnlyPositiveDecimals"]
- !private ["s26_RangeReplaceableIndexableP", "contains"]
- !private ["s26_RangeReplaceableIndexableP", "count"]
- !private ["s26_RangeReplaceableIndexableP", "dot"]
- !private ["s26_RangeReplaceableIndexableP", "dummyIdentifier"]
- !private ["s26_RangeReplaceableIndexableP", "dummyIntegerLiteral"]
- !private ["s26_RangeReplaceableIndexableP", "dummyStaticStringLiteral"]
- !private ["s26_RangeReplaceableIndexableP", "else"]
- !private ["s26_RangeReplaceableIndexableP", "if"]
- !private ["s26_RangeReplaceableIndexableP", "in"]
- !private ["s26_RangeReplaceableIndexableP", "init"]
- !private ["s26_RangeReplaceableIndexableP", "isEmpty"]
- !private ["s26_RangeReplaceableIndexableP", "leftBrace"]
- !private ["s26_RangeReplaceableIndexableP", "leftParen"]
- !private ["s26_RangeReplaceableIndexableP", "rightBrace"]
- !private ["s26_RangeReplaceableIndexableP", "rightParen"]
- !private ["s26_RangeReplaceableIndexableP", "where"]
- !private ["s26_RangeReplaceableIndexableP", "while"]
- !private ["s11_StrideableP", "init"]
- !private ["s16_SwiftStringViewP", "containOnlyPositiveDecimals"]
- !private ["s16_SwiftStringViewP", "count"]
- !private ["s16_SwiftStringViewP", "init"]
depends-nominal:
- !private "3AST7ASTNodeC"
- !private "3AST14ASTNodeContextP"
- !private "3AST20ASTTextRepresentableP"
- !private "3AST21AvailabilityConditionV8ArgumentO"
- !private "Sa"
- !private "3AST28AssignmentOperatorExpressionC"
- !private "3AST21AvailabilityConditionV"
- !private "s23BidirectionalCollectionP"
- !private "3AST16BinaryExpressionP"
- !private "s13BinaryIntegerP"
- !private "Sb"
- !private "3AST14BreakStatementC"
- !private "s7CVarArgP"
- !private "3AST15SwitchStatementC4CaseO"
- !private "3AST11DoStatementC11CatchClauseV"
- !private "3AST9CodeBlockC"
- !private "s10CollectionP"
- !private "s10ComparableP"
- !private "3AST24CompilerControlStatementC"
- !private "3AST9ConditionO"
- !private "3AST17ContinueStatementC"
- !private "s28CustomDebugStringConvertibleP"
- !private "s29CustomPlaygroundQuickLookableP"
- !private "s17CustomReflectableP"
- !private "s23CustomStringConvertibleP"
- !private "s9DecodableP"
- !private "3AST14DeferStatementC"
- !private "10Diagnostic0A4KindP"
- !private "3AST11DoStatementC"
- !private "3AST11IfStatementC10ElseClauseO"
- !private "s9EncodableP"
- "s9EquatableP"
- !private "s25ExpressibleByArrayLiteralP"
- !private "s27ExpressibleByBooleanLiteralP"
- !private "s43ExpressibleByExtendedGraphemeClusterLiteralP"
- !private "s27ExpressibleByIntegerLiteralP"
- !private "s23ExpressibleByNilLiteralP"
- !private "s26ExpressibleByStringLiteralP"
- !private "s33ExpressibleByUnicodeScalarLiteralP"
- !private "3AST10ExpressionP"
- !private "3AST17ExpressionPatternC"
- !private "3AST20FallthroughStatementC"
- !private "s17FixedWidthIntegerP"
- !private "3AST14ForInStatementC"
- !private "3AST14GuardStatementC"
- !private "s8HashableP"
- !private "3AST11IfStatementC"
- !private "Si"
- !private "3AST15SwitchStatementC4CaseO4ItemV"
- !private "3AST24CompilerControlStatementC4KindO"
- "5Lexer5TokenV4KindO"
- !private "3AST16LabeledStatementC"
- !private "5LexerAAC"
- !private "3AST13LocatableNodeC"
- !private "s25LosslessStringConvertibleP"
- !private "s10MirrorPathP"
- !private "s17MutableCollectionP"
- !private "So8NSCodingP"
- !private "So9NSCopyingP"
- !private "So21NSItemProviderReadingP"
- !private "So21NSItemProviderWritingP"
- !private "So16NSMutableCopyingP"
- !private "So8NSObjectC"
- !private "So16NSObjectProtocolP"
- !private "So14NSSecureCodingP"
- !private "So8NSStringC"
- !private "s7NumericP"
- !private "Sq"
- "6ParserAAC"
- !private "6Parser0A9ErrorKindO"
- !private "6Parser0A16ExpressionConfigV"
- !private "6Parser0A13PatternConfigV"
- !private "3AST7PatternP"
- !private "3AST11PatternBaseC"
- !private "s22RandomAccessCollectionP"
- !private "s26RangeReplaceableCollectionP"
- !private "3AST20RepeatWhileStatementC"
- !private "3AST15ReturnStatementC"
- !private "s8SequenceP"
- !private "s13SignedIntegerP"
- !private "s13SignedNumericP"
- !private "6Source0A9LocatableP"
- !private "6Source0A8LocationV"
- !private "6Source0A5RangeV"
- !private "3AST9StatementP"
- !private "s10StrideableP"
- !private "SS"
- !private "s14StringProtocolP"
- !private "3AST15SwitchStatementC"
- !private "s16TextOutputStreamP"
- !private "s20TextOutputStreamableP"
- !private "3AST14ThrowStatementC"
- !private "5Lexer5TokenV"
- !private "3AST14WhileStatementC"
- !private "s14_ArrayProtocolP"
- !private "s23_BidirectionalIndexableP"
- !private "s18_BitwiseOperationsP"
- !private "s24_DestructorSafeContainerP"
- !private "s35_ExpressibleByBuiltinBooleanLiteralP"
- !private "s51_ExpressibleByBuiltinExtendedGraphemeClusterLiteralP"
- !private "s35_ExpressibleByBuiltinIntegerLiteralP"
- !private "s34_ExpressibleByBuiltinStringLiteralP"
- !private "s39_ExpressibleByBuiltinUTF16StringLiteralP"
- !private "s41_ExpressibleByBuiltinUnicodeScalarLiteralP"
- !private "s33_ExpressibleByStringInterpolationP"
- !private "s35_HasCustomAnyHashableRepresentationP"
- !private "s10_IndexableP"
- !private "s14_IndexableBaseP"
- !private "10Foundation27_KeyValueCodingAndObservingP"
- !private "s17_MutableIndexableP"
- !private "s21_ObjectiveCBridgeableP"
- !private "s26_OptionalNilComparisonTypeV"
- !private "s22_RandomAccessIndexableP"
- !private "s26_RangeReplaceableIndexableP"
- !private "s11_StrideableP"
- !private "s16_SwiftStringViewP"
depends-dynamic-lookup:
depends-external:
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/Dispatch.apinotesc"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/ObjectiveC.swiftmodule"
- "/Users/sara/Developer/CDSwiftAST/.build/x86_64-apple-macosx10.10/debug/AST.swiftmodule"
- "/Users/sara/Developer/CDSwiftAST/.build/x86_64-apple-macosx10.10/debug/Diagnostic.swiftmodule"
- "/Users/sara/Developer/CDSwiftAST/.build/x86_64-apple-macosx10.10/debug/Source.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/Dispatch.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/Darwin.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/Foundation.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/CoreFoundation.swiftmodule"
- "/Users/sara/Developer/CDSwiftAST/.build/x86_64-apple-macosx10.10/debug/Bocho.swiftmodule"
- "/Users/sara/Developer/CDSwiftAST/.build/x86_64-apple-macosx10.10/debug/Lexer.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/CoreGraphics.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/Swift.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/IOKit.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/lib/swift/macosx/x86_64/SwiftOnoneSupport.swiftmodule"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/objc/ObjectiveC.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/usr/include/Darwin.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Foundation.framework/Headers/Foundation.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/CoreGraphics.framework/Headers/CoreGraphics.apinotes"
- "/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/CoreText.framework/Headers/CoreText.apinotes"
interface-hash: "76e733a67c821f10d36b88706462e85a"
